airbnb_split <- initial_split(calendar_data)
airbnb_train <- training(airbnb_split)
airbnb_test <- testing(airbnb_split)
airbnb_rf <- ranger(price ~ .,
data = airbnb_train,
mtry = floor((ncol(airbnb_train) - 1) / 3),
importance = "impurity",
num.trees = 500,
classification = FALSE)
View(airbnb_rf)
listing_data <- read.csv("listings_gz.csv")
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id", "id"))
calendar_data <- read.csv("calendar_gz.csv")
calendar_data <- calendar_data %>%
mutate(date = dmy(date))
calendar_data$price <- gsub("\\$", "", calendar_data$price) %>%
as.numeric()
calendar_data <- calendar_data_dirty %>%
mutate(date = dmy(date)) %>%
select(-c(adjusted_price, available))
calendar_data_dirty <- read.csv("calendar_gz.csv")
calendar_data <- calendar_data_dirty %>%
mutate(date = dmy(date)) %>%
select(-c(adjusted_price, available))
calendar_data$price <- gsub("\\$", "", calendar_data$price) %>%
as.numeric()
listing_data_dirty <- read.csv("listings_gz.csv")
listing_data <- listing_data_dirty %>%
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_verifications, host_has_profile_pic, host_identity_verified, property_type, room_type, accomodates, bathrooms_text, bedrooms, beds, price, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
listing_data <- listing_data_dirty %>%
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_verifications, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, price, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
View(listing_data_dirty)
listing_data <- listing_data_dirty %>%
filter(last_scraped == "2023-06-12") %>%
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_verifications, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, price, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
View(combo_data)
str(combo_data)
listing_data <- listing_data_dirty %>%
filter(last_scraped == "2023-06-12") %>%
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_verifications, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
str(combo_data)
listing_data <- listing_data_dirty %>%
filter(last_scraped == "2023-06-12") %>%
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
str(combo_data)
combo_data$host_acceptance_rate <- gsub("\\%", "", combo_data$host_acceptance_rate) %>%
as.numeric()
str(combo_data)
# convert bathrooms_text to int
combo_data$bathrooms_text <- gsub(" baths", "", combo_data$bathrooms_text) %>%
as.numeric()
str(combo_data)
# convert first_review and last_review to Date
combo_data <- combo_data %>%
# convert first_review and last_review to Date
mutate(first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
mutate_if(is.character(), as.factor())
combo_data %>%
# convert first_review and last_review to Date
mutate(first_review = ymd(first_review),
last_review = ymd(last_review))
# convert first_review and last_review to Date
combo_data <- combo_data %>%
# convert first_review and last_review to Date
mutate(first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
mutate_if(is.character, as.factor)
str(combo_data)
sum(is.na(combo_data))
sum(is.na(combo_data))
combo_data <- combo_data %>%
na.omit()
# basic listing cleaning
# remove repeated IDs
listing_data <- listing_data_dirty[!duplicated(listing_data_dirty$id),]
listing_data <- listing_data %>%
# select relevant columns
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
library(tidyverse)
library(lubridate)
library(rsample)
library(ranger)
# import calendar
calendar_data_dirty <- read.csv("calendar_gz.csv")
# basic calendar cleaning
calendar_data <- calendar_data_dirty %>%
# convert date to Date
mutate(date = dmy(date)) %>%
# deselect irrelevant columns
select(-c(adjusted_price, available))
# clean & convert price to num
calendar_data$price <- gsub("\\$", "", calendar_data$price) %>%
as.numeric()
# import listings
listing_data_dirty <- read.csv("listings_gz.csv")
# basic listing cleaning
# remove repeated IDs
listing_data <- listing_data_dirty[!duplicated(listing_data_dirty$id),]
listing_data <- listing_data %>%
# select relevant columns
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
# join calendar and listings by id
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
# clean & convert host_acceptance_rate to num
combo_data$host_acceptance_rate <- gsub("\\%", "", combo_data$host_acceptance_rate) %>%
as.numeric()
# clean & convert bathrooms_text to num
combo_data$bathrooms_text <- gsub(" baths", "", combo_data$bathrooms_text) %>%
as.numeric()
combo_data <- combo_data %>%
# convert first_review and last_review to Date
mutate(first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
# remove NAs
combo_data <- combo_data %>%
na.omit()
# export data to csv
write.csv(combo_data, "airbnb.csv", row.names = FALSE)
test <- read.csv("airbnb.csv")
str(test)
library(tidyverse)
library(lubridate)
# import calendar
calendar_data_dirty <- read.csv("calendar_gz.csv")
# basic calendar cleaning
calendar_data <- calendar_data_dirty %>%
# deselect irrelevant columns
select(-c(adjusted_price, available))
# clean & convert price to num
calendar_data$price <- gsub("\\$", "", calendar_data$price) %>%
as.numeric()
# import listings
listing_data_dirty <- read.csv("listings_gz.csv")
# basic listing cleaning
# remove repeated IDs
listing_data <- listing_data_dirty[!duplicated(listing_data_dirty$id),]
listing_data <- listing_data %>%
# select relevant columns
select(id, host_response_time, host_acceptance_rate, host_is_superhost, host_listings_count, host_total_listings_count, host_has_profile_pic, host_identity_verified, property_type, room_type, accommodates, bathrooms_text, bedrooms, beds, availability_365, number_of_reviews, first_review, last_review, review_scores_rating, review_scores_accuracy, review_scores_cleanliness, review_scores_checkin, review_scores_communication, review_scores_location, review_scores_value, reviews_per_month)
# join calendar and listings by id
combo_data <- calendar_data %>% inner_join(
listing_data,
by = c("listing_id" = "id"))
# clean & convert host_acceptance_rate to num
combo_data$host_acceptance_rate <- gsub("\\%", "", combo_data$host_acceptance_rate) %>%
as.numeric()
# clean & convert bathrooms_text to num
combo_data$bathrooms_text <- gsub(" baths", "", combo_data$bathrooms_text) %>%
as.numeric()
# remove NAs
combo_data <- combo_data %>%
na.omit()
# export data to csv
write.csv(combo_data, "airbnb.csv", row.names = FALSE)
library(tidyverse)
library(lubridate)
# import data
airbnb_dirty <- read.csv("airbnb.csv")
str(airbnb_dirty)
airbnb <- airbnb_dirty %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
str(airbnb)
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
str(airbnb)
install.packages("rlang")
install.packages("rlang")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidy")
install.packages("tidymodels")
library(tensorflow)
library(keras)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tensorflow)
library(keras)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
library(tensorflow)
library(keras)
library(tidyverse)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidyverse)
library(lubridate)
library(rsample)
library(xgboost)
library(caret)
# import data
airbnb_dirty <- read.csv("airbnb.csv")
str(airbnb_dirty)
library(tidyverse)
library(lubridate)
library(rsample)
library(xgboost)
library(caret)
# import data
airbnb_dirty <- read.csv("airbnb.csv")
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type))
airbnb_split <- initial_split(airbnb)
airbnb_train_dataset <- training(airbnb_split)
airbnb_test_dataset <- testing(airbnb_split)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix() %>%
xgb.DMatrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix() %>%
xgb.DMatrix()
targets <- airbnb_train_dataset$price
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
model_xgb <- train(
train_Dmatrix,targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10
)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
model_xgb <- train(
train_Dmatrix,targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10
)
model_xgb$bestTune
model_xgb <- train(
train_Dmatrix,targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
model_xgb$bestTune
library(tidyverse)
library(lubridate)
library(rsample)
library(xgboost)
library(caret)
# import data
airbnb_dirty <- read.csv("airbnb.csv")
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= dmy("28/02/2024"))
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= dmy("28/02/2024"))
# import data
airbnb_dirty <- read.csv("airbnb.csv")
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= dmy("28/02/2024"))
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= "28/02/2024")
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < "28/02/2024")
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < '28/02/2024')
?filter
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(date < '28/02/2024')
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(date < '28-02-2024')
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(data < dmy("28-02-2024"))
str(airbnb)
airbnb %>%
filter(date < '2023-11-30')
airbnb <- airbnb %>%
select(-c(first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < dmy("28-02-2024"))
airbnb_train_dataset <- airbnb %>%
filter(data <= "30/11/2023")
airbnb_train_dataset <- airbnb %>%
filter(date <= "30/11/2023")
airbnb_test_dataset <- airbnb %>%
filter(date >= "01/12/2023")
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
#Making the variables used in forecast object
fitted <- model_xgb %>%
predict(train_Dmatrix) %>%
ts(start = c(2013,1),frequency = 12)
model_xgb <- train(
train_Dmatrix,targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
library(tidyverse)
library(knitr)
library(naniar)
library(readxl)
library(rvest)
library(measurements)
library(polite)
library(janitor)
library(tools)
library(openxlsx)
library("berryFunctions")
tour_link <- bow("https://en.wikipedia.org/wiki/%2B%E2%80%93%3D%C3%B7%C3%97_Tour") %>% scrape()
tour_data_2022 <- tour_link %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>%
html_table() %>%
as.data.frame()
tour_data_2023 <- tour_link %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[3]') %>%
html_table() %>%
as.data.frame()
tour_data <- tour_data_2022 %>%
bind_rows(tour_data_2023) %>%
separate(Attendance, c("Attendance", "Capacity"), " / ")
View(tour_data)
View(tour_data_2023)
View(tour_data_2023)
tour_link <- bow("https://en.wikipedia.org/wiki/%2B%E2%80%93%3D%C3%B7%C3%97_Tour") %>% scrape()
tour_data_2022 <- tour_link %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[2]') %>%
html_table() %>%
as.data.frame()
colnames(tour_data_2022)[1] <- "Date"
tour_data_2023 <- tour_link %>%
html_nodes(xpath = '//*[@id="mw-content-text"]/div[1]/table[3]') %>%
html_table() %>%
as.data.frame()
colnames(tour_data_2023)[1] <- "Date"
tour_data <- tour_data_2022 %>%
bind_rows(tour_data_2023) %>%
separate(Attendance, c("Attendance", "Capacity"), " / ")
View(tour_data)
write.csv(tour_data, "tour_data.csv", row.names = FALSE)
setwd("~/GitHub/FIT3179/assignment2")
