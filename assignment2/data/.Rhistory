filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= dmy("28/02/2024"))
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date <= "28/02/2024")
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < "28/02/2024")
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < '28/02/2024')
?filter
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(date < '28/02/2024')
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(date < '28-02-2024')
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
dplyr::filter(data < dmy("28-02-2024"))
str(airbnb)
airbnb %>%
filter(date < '2023-11-30')
airbnb <- airbnb %>%
select(-c(first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type)) %>%
filter(date < dmy("28-02-2024"))
airbnb_train_dataset <- airbnb %>%
filter(data <= "30/11/2023")
airbnb_train_dataset <- airbnb %>%
filter(date <= "30/11/2023")
airbnb_test_dataset <- airbnb %>%
filter(date >= "01/12/2023")
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
#Making the variables used in forecast object
fitted <- model_xgb %>%
predict(train_Dmatrix) %>%
ts(start = c(2013,1),frequency = 12)
model_xgb <- train(
train_Dmatrix,targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
# import data
airbnb_dirty <- read.csv("airbnb.csv")
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
library(tidyverse)
library(lubridate)
library(rsample)
library(xgboost)
library(caret)
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type))
airbnb_split <- initial_split(airbnb)
airbnb_train_dataset <- training(airbnb_split)
airbnb_test_dataset <- testing(airbnb_split)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
model_xgb <- train(
train_Dmatrix, targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
#Building data frame
library(readxl)
df_xautry <- read_excel("xautry_reg.xlsx")
df_xautry$date <- as.Date(df_xautry$date)
#Splitting train and test data set
df_xautry_split <- initial_split(df_xautry)
train <- training(df_xautry_split)
test <- testing(df_xautry_split)
View(train)
View(airbnb_train_dataset)
train_Dmatrix_test <- train %>%
dplyr::select(xe, xau_usd_ounce) %>%
as.matrix()
pred_Dmatrix_test <- test %>%
dplyr::select(xe, xau_usd_ounce) %>%
as.matrix()
View(train_Dmatrix)
View(train_Dmatrix_test)
str(train_Dmatrix_test)
str(train_Dmatrix)
sum(is.na(train_Dmatrix))
View(train_Dmatrix_test)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type))
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type))
airbnb_split <- initial_split(airbnb)
airbnb_train_dataset <- training(airbnb_split)
airbnb_test_dataset <- testing(airbnb_split)
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
model_xgb <- train(
train_Dmatrix, targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
str(train_Dmatrix)
airbnb <- airbnb_dirty %>%
# remove id
select(-c("listing_id")) %>%
# remove N/A
filter(host_response_time != "N/A") %>%
# convert dates to Date
mutate(date = dmy(date),
first_review = ymd(first_review),
last_review = ymd(last_review)) %>%
# convert characters to factors
mutate_if(is.character, as.factor)
set.seed(13)
airbnb <- airbnb %>%
select(-c(date, first_review, last_review, host_response_time, host_is_superhost, host_has_profile_pic, host_identity_verified, property_type, room_type))
airbnb_split <- initial_split(airbnb)
airbnb_train_dataset <- training(airbnb_split)
airbnb_test_dataset <- testing(airbnb_split)
train_Dmatrix <- airbnb_train_dataset %>%
select(-c(price)) %>%
as.matrix()
pred_Dmatrix <- airbnb_test_dataset %>%
select(-c(price)) %>%
as.matrix()
targets <- airbnb_train_dataset$price
str(train_Dmatrix)
xgb_trcontrol <- trainControl(
method = "cv",
number = 10,
allowParallel = TRUE,
verboseIter = FALSE,
returnData = FALSE
)
# building parameters set
xgb_grid <- expand.grid(
list(
nrounds = seq(100,200),
max_depth = c(6,15,20),
colsample_bytree = 1,
eta = 0.5,
gamma = 0,
min_child_weight = 1,
subsample = 1)
)
model_xgb <- train(
train_Dmatrix, targets,
trControl = xgb_trcontrol,
tuneGrid = xgb_grid,
method = "xgbTree",
nthread = 10,
verbosity = 0
)
model_xgb$bestTune
#Making the variables used in forecast object
fitted <- model_xgb %>%
predict(train_Dmatrix) %>%
ts(start = c(2024,7),frequency = 12)
ts_airbnb <- ts(label, start = c(2024,7), frequency = 12)
#Making the variables used in forecast object
fitted <- model_xgb %>%
predict(train_Dmatrix) %>%
ts(start = c(2024,7),frequency = 12)
ts_airbnb <- ts(targets, start = c(2024,7), frequency = 12)
forecast_xgb <- model_xgb %>%
predict(pred_Dmatrix)
forecast_ts <- ts(forecast_xgb, start = c(2023,6), frequency = 12)
#Preparing forecast object
forecast_airbnb <- list(
model = model_xgb$modelInfo,
method = model_xgb$method,
mean = forecast_ts,
x = ts_airbnb,
fitted = fitted,
residuals = as.numeric(ts_airbnb) - as.numeric(fitted)
)
class(forecast_airbnb) <- "forecast"
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series varibale for observed data
observed_values <- ts(test$price,start=c(2023,6),frequency=12)
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb)+
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(forecast_airbnb$x,series ="Train",size=0.75 ) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels =date_transform,breaks = seq(2013,2021,2) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb)+
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels =date_transform,breaks = seq(2023,2025,2) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb)+
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb)+
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb)+
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,2) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2023,6),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb) +
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,12) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#Making the variables used in forecast object
fitted <- model_xgb %>%
predict(train_Dmatrix) %>%
ts(start = c(2023,6),frequency = 12)
ts_airbnb <- ts(targets, start = c(2023,6), frequency = 12)
forecast_xgb <- model_xgb %>%
predict(pred_Dmatrix)
forecast_ts <- ts(forecast_xgb, start = c(2024,7), frequency = 12)
#Preparing forecast object
forecast_airbnb <- list(
model = model_xgb$modelInfo,
method = model_xgb$method,
mean = forecast_ts,
x = ts_airbnb,
fitted = fitted,
residuals = as.numeric(ts_airbnb) - as.numeric(fitted)
)
class(forecast_airbnb) <- "forecast"
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2024,7),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb) +
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,12) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2024,7),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb) +
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(forecast_xautrygram$x,series ="Train",size=0.75 ) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,12) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2024,7),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb) +
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(forecast_airbnb$x,series ="Train",size=0.75 ) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,12) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
#The function to convert decimal time label to wanted format
date_transform <- function(x) {format(date_decimal(x), "%Y")}
#Making a time series variable for observed data
observed_values <- ts(airbnb_test_dataset$price,start=c(2024,7),frequency=12)
#Plot forecasting
library(ggplot2)
library(forecast)
autoplot(forecast_airbnb) +
autolayer(forecast_airbnb$x,series ="Train",size=0.75 ) +
autolayer(forecast_airbnb$mean,series="Predicted",size=0.75) +
autolayer(observed_values,series = "Observed",size=0.75) +
scale_x_continuous(labels = date_transform,breaks = seq(2023,2024,12) ) +
guides(colour=guide_legend(title = "Time Series")) +
ylab("Price") + xlab("Time") +
ggtitle("") +
theme_bw()
?ts
setwd("~/GitHub/FIT3179/assignment2")
test <- read.csv("tour_data_by_date.csv")
setwd("~/GitHub/FIT3179/assignment2/data")
test <- read.csv("tour_data_by_date.csv")
library(tidyverse)
test <- read.csv("tour_data_by_date.csv")
test <- read.csv("data/tour_data_by_date.csv")
View(test)
?melt
?pivot_longer
test <- read.csv("data/tour_data_by_date.csv")
test %>% pivot_longer(
cols = c("Opening_Act_1", "Opening_Act_2", "Opening_Act_3"),
)
test %>% pivot_longer(
cols = c("Opening_Act_1", "Opening_Act_2", "Opening_Act_3")
) %>%
str()
test %>% pivot_longer(
cols = c("Opening_Act_1", "Opening_Act_2", "Opening_Act_3"),
names_to = "Opening_Act_Order",
values_to = "Opening Act"
) %>%
str()
